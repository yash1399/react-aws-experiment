{"version":3,"sources":["components/Register.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Register","useState","name","setName","email","setEmail","password","setPassword","gender","setGender","onSubmit","event","a","preventDefault","console","log","axios","post","res","value","type","onChange","e","target","placeholder","Login","localStorage","setItem","data","token","onClickPro","getItem","get","headers","onClick","App","to","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14bd463f.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst Register = () => {\r\n    const [name , setName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState(); \r\n    const [gender, setGender] = useState(); \r\n\r\n\r\n    \r\n\r\n    const onSubmit =  async (event) => {\r\n        event.preventDefault();\r\n        console.log('dont reload', name + email, password, gender);\r\n        const res = await axios.post('http://api.ybcreates.ml/user',{\r\n            name,\r\n            email,\r\n            password,\r\n            gender\r\n        })\r\n        console.log(res);\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1> User resgistration</h1>\r\n            <form onSubmit = {onSubmit}>\r\n               \r\n                <div>\r\n                    <label>Name</label>\r\n                    <input \r\n                    value= {name}\r\n                    type=\"text\" onChange ={(e)=> {setName(e.target.value)}}\r\n                    placeholder=\"Enter your name\" /> \r\n                </div>\r\n               \r\n                \r\n                <div>\r\n                    <label>Email</label> \r\n                    <input\r\n                    value= {email} \r\n                    onChange = {(e) => {setEmail(e.target.value)}}\r\n                    type=\"email\" placeholder=\"Enter your email id\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Password</label>\r\n                    <input \r\n                    value= {password} \r\n                    onChange = {(e) => {setPassword(e.target.value)}}\r\n                    type=\"password\" placeholder=\"Create new password\"/>\r\n                </div>\r\n              \r\n               <div>\r\n                <form>\r\n                        <label>Gender</label>\r\n                        <select  onChange = {(e) => {setGender(e.target.value)}} value={gender}>\r\n                            <option value=\"male\">Male</option>\r\n                            <option value=\"female\">Female</option>\r\n                            <option value=\"other\">Other</option>\r\n                        </select>  \r\n                 </form>\r\n                </div> \r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                </div>   \r\n               \r\n                            \r\n            </form> \r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Register;\r\n","import React, { useState } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst Login = () => {\r\n    \r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState(); \r\n  \r\n\r\n\r\n    \r\n\r\n    const onSubmit =  async (event) => {\r\n        event.preventDefault();\r\n        console.log('dont reload',email, password,);\r\n        const res = await axios.post('http://api.ybcreates.ml/login ',{\r\n            email,\r\n            password,\r\n   \r\n        })\r\n        localStorage.setItem('token', res.data.token);\r\n\r\n    }\r\n\r\n    const onClickPro = async () => {\r\n        const token = localStorage.getItem('token');\r\n        const res = await axios.get('http://api.ybcreates.ml/protected', {\r\n            headers :{\r\n                token\r\n            }\r\n        });\r\n        console.log(res)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1> User Login</h1>\r\n            <form onSubmit = {onSubmit}>\r\n                <div>\r\n                    <label>Email</label> \r\n                    <input\r\n                    value= {email} \r\n                    onChange = {(e) => {setEmail(e.target.value)}}\r\n                    type=\"email\" placeholder=\"Enter your email id\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Password</label>\r\n                    <input \r\n                    value= {password} \r\n                    onChange = {(e) => {setPassword(e.target.value)}}\r\n                    type=\"password\" placeholder=\"Enter password\"/>\r\n                </div>\r\n              \r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                </div>       \r\n                <div>\r\n                    <button type=\"submit\" onClick = {onClickPro}>Check Protected</button>\r\n                </div>                             \r\n            </form> \r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Login;","import React from 'react';\nimport './App.css';\nimport { Switch, Route, Link} from 'react-router-dom';\nimport Register from './components/Register';\nimport Login from './components/Login';\n\n\n\n\nfunction App() {\n  return (\n    <>\n    <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Register</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            \n          </ul>\n      </nav>\n\n    <div className=\"App\">\n        \n      <Switch>\n        <Route exact path='/'>\n          <Register/>\n        </Route>\n        <Route path='/login'>\n          <Login/>\n        </Route> \n      </Switch>\n      \n    </div>\n\n    </>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}